* About
This file is used as a notepad, useful for brainstorming, keeping track of work
and logging.

* What is this project about?
** Problem set definition
It is about solving the common task of alternating contents of UI components
based on user actions and URL navigation.

For example:

It is very common for toolbars to contain multiple buttons. Some of these
buttons may change the contents of the toolbar among producing other side
effects.

Such a feature would be categorized as a 'user action' of the problem set
definition.

At the same time, one would also like that same toolbar to be aware of the
URL location under which it is being rendered and have it behave accordingly.

Such a feature would be categorized as a 'URL navigation' section of the problem
set definition.

* ReactActionRouter as a Factory function

Just like the createBrowserRouter of react-router-dom, there could be a function
named createActionRouter that accepts an array of route objects.

A route object could be of the form:

#+begin_src js
  {
    // route side effects
    action: () => {},
    // route UI
    element: ReactElement,
    // route location
    path: "",
    id: "",
  }
#+end_src

To keep things simple createActionRouter would not accept a hierarchical tree of
routes nor would it introduce special path syntax like regular expressions.

The Route object UI that is currently rendered would only be superseded if a new
route is pushed on the stack.

** Types of UI

Some ui triggers changes,
Some ui is rendered within the toolbar
Some ui is rendered outside of the toolbar
** factory function return value

The factory function could return:

- a context
- a hook
- Components
- all of the above

* Allow ActionRoute components to render in designated mount points and inherit context
* logs
** 09/08/23
First day of development.

Defined the problem set.

Created a new repository with development tools.

** 11/08/23
useActionRouter currently maintains two lists of routes. The available routes in
the form of *elementsRef* and *stack*. Instead one could dispose of *stack* and
turn it into *index*, a number representing the currently rendered route among
the list of routes.
